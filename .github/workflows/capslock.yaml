name: capslock-capability-diff
on:
  pull_request:
    types: [opened, synchronize, reopened]

permissions:
  contents: read
  pull-requests: write

jobs:
  capslock-cap-diff:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout PR (HEAD)
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Checkout BASE into ./base
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.base.sha }}
          path: base
          fetch-depth: 0

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.22'

      - name: Install capslock
        run: |
          go install github.com/google/capslock/cmd/capslock@latest
          echo "$(go env GOPATH)/bin" >> $GITHUB_PATH

      # ---- Run capslock (HEAD / BASE) and capture JSON ----
      - name: Analyze HEAD
        run: |
          set -e
          capslock -packages=./... -output=json > head.json || { echo "capslock failed on HEAD"; exit 1; }
          jq '.[0]?' head.json >/dev/null 2>&1 || echo "::warning ::HEAD capslock JSON looks empty or unexpected"

      - name: Analyze BASE
        run: |
          set -e
          pushd base >/dev/null
          capslock -packages=./... -output=json > ../base.json || { echo "capslock failed on BASE"; exit 1; }
          popd
          jq '.[0]?' base.json >/dev/null 2>&1 || echo "::warning ::BASE capslock JSON looks empty or unexpected"

      # ---- Summarize counts per capability (HEAD / BASE) ----
      # ※ あなたのローカルで確認した通り、.capabilityInfo を集計します
      - name: Build capability count maps
        run: |
          set -e
          # object { CAPABILITY_X: count, ... } を作る（空でも {}）
          jq '
            .capabilityInfo
            | group_by(.capability)
            | map({ (.[0].capability): length })
            | add // {}
          ' base.json > base_counts.json

          jq '
            .capabilityInfo
            | group_by(.capability)
            | map({ (.[0].capability): length })
            | add // {}
          ' head.json > head_counts.json

          echo "BASE counts:"; cat base_counts.json
          echo "HEAD counts:"; cat head_counts.json

      # ---- Compute diff array [{capability, base, head, delta}] ----
      - name: Compute diff JSON
        run: |
          jq -s '
            .[0] as $base | .[1] as $head
            | ($base + $head)       # union of keys (values from head override but we only need keys)
            | keys
            | map({
                capability: .,
                base: ($base[.] // 0),
                head: ($head[.] // 0),
                delta: (($head[.] // 0) - ($base[.] // 0))
              })
          ' base_counts.json head_counts.json > diff.json
          cat diff.json

      # ---- Render Markdown table with +/- deltas ----
      - name: Render PR comment markdown
        id: render
        run: |
          # 変化行（delta != 0）のテーブルを作る。行が無ければ一言でOK
          jq -r '
            def sign(n): if n>0 then "+" + (n|tostring) else (n|tostring) end;
            . as $rows
            | ([$rows[] | select(.delta!=0)] | length) as $n
            | if $n == 0 then
                "No capability count changes detected."
              else
                "### Capslock capability diff\n\n" +
                "| Capability | base | head | Δ |\n|---|---:|---:|---:|\n" +
                ([$rows[] | select(.delta!=0)
                  | "| \(.capability) | \(.base) | \(.head) | " + sign(.delta) + " |"
                 ] | join("\n"))
              end
          ' diff.json > body_part.md

          {
            echo "<!-- capslock-cap-diff -->"
            echo "**Capslock capability counts (per package graph)**"
            echo ""
            echo "- Base: \`${{ github.event.pull_request.base.sha }}\`"
            echo "- Head: \`${{ github.sha }}\`"
            echo ""
            cat body_part.md
            echo ""
            echo "<sub>Generated by capslock @ $GITHUB_RUN_NUMBER</sub>"
          } > comment.md

          echo "body<<EOF" >> $GITHUB_OUTPUT
          cat comment.md >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      # ---- Post (create or update) PR comment ----
      - name: Upsert PR comment
        uses: actions/github-script@v7
        with:
          script: |
            const {owner, repo, number} = {
              owner: context.repo.owner,
              repo:  context.repo.repo,
              number: context.payload.pull_request.number
            };
            const marker = '<!-- capslock-cap-diff -->';
            const body   = process.env.BODY;

            // find existing comment
            const { data: comments } = await github.rest.issues.listComments({ owner, repo, issue_number: number, per_page: 100 });
            const mine = comments.find(c => c.body && c.body.includes(marker));

            if (mine) {
              await github.rest.issues.updateComment({
                owner, repo,
                comment_id: mine.id,
                body
              });
            } else {
              await github.rest.issues.createComment({
                owner, repo, issue_number: number, body
              });
            }
        env:
          BODY: ${{ steps.render.outputs.body }}

      - name: Upload artifacts (for debugging)
        uses: actions/upload-artifact@v4
        with:
          name: capslock-cap-diff
          path: |
            base.json
            head.json
            base_counts.json
            head_counts.json
            diff.json
            comment.md
